出典: フリー百科事典『ウィキペディア（Wikipedia）』 移動: ナビゲーション, 検索 HTML  HTML・HTML5ダイナミックHTMLXHTMLXHTML Mobile Profile・C-HTMLcanvas要素文字符号化Document Object ModelフォントファミリーHTML エディターHTML要素HTMLフレームHTML5ビデオHTMLスクリプティングHTMLレンダリングエンジン奇癖モードスタイルシートHTMLのUnicode表記W3C・WHATWGウェブカラーWebGLWebストレージ比較 マークアップ言語ウェブブラウザレンダリングエンジンの比較 HTMLHTML5HTML5メディア非標準HTMLXHTML       表・話・編・歴   スタイルシート (Style Sheet) とは、ドキュメント文書において表示形式を制御する概念。見栄えと構造を分離するという目的で提唱された。HTMLやXML、SGMLといったマークアップ文書や、オフィスソフトにおいて広く使用されている。Web上で広く使われているHTML文書にスタイルシートを適用させる場合には、一般的にCSSが利用される。こうした現状からCSSが圧倒的な普及度を誇っているため、単にスタイルシートといえばCSSを指すことがある。目次 1 スタイルシート言語1.1 構成要素  2 スタイルシート言語の一覧2.1 標準2.2 非標準  3 オフィスソフトにおけるスタイルシート4 Webにおけるスタイルシート5 スタイルシートの特徴5.1 利点5.2 実用上の問題  6 脚注7 関連項目8 外部リンク    [編集] スタイルシート言語スタイルシート言語（英: Style sheet language）とは、構造化文書の見た目を記述するコンピュータ言語。構造化文書とは、節や段落が明確に定義・分類された文書である。内容が明確に分類されているので、その文書を表示するプログラムは任意の表示スタイルを設定できる。広く使われているスタイルシート言語としてはCSS (Cascading Style Sheets) があり、HTML、XHTML、SVG、XUL、その他のマークアップ言語で書かれた文書のスタイルを指定するのに使われる。構造化文書の利点の一つとして、内容を様々な状況で再利用でき、様々な方法で表示可能という点が挙げられる。構造化文書の論理構造に異なるスタイルシートを付与することで、異なる表示が得られる。構造化文書の内容を表示するには、スタイル的規則、例えば色やフォントやレイアウトなどの規則が適用されなければならない。このスタイル的規則を集めたものがスタイルシートである。編集者や印刷業者は昔から、文書の形でスタイルシートのような情報（見た目、スペリング、句読点の一貫性などの規則）を扱ってきた。電子出版においては、スタイルシート言語はスペリングや句読点よりも見た目に関する規則を扱うものとして使われる。[編集] 構成要素構造化文書を表示するには、スタイルシート言語の表現能力を必要とする。スタイルシート言語には以下のような機能要素がある。文法機械が理解できる形で表現しなければならないため、厳密な文法が必要とされる。例えば、 
h1 { font-size: 1.5em }
 はCSSの文法で書かれた単純なスタイルシートである。セレクタセレクタとは、どの要素がそのスタイル規則によって影響されるかを指定するものである。文書の構造とスタイルシート内のスタイル規則の接着剤の役割を担う。上記の例では、"h1" セレクタによって h1 要素が指定されている。文脈やプロパティや内容を考慮した複雑な要素選択を行うセレクタもある。プロパティスタイルシート言語には、要素を表示する際の変化を与えるプロパティの概念が備わっている。上記の例ではCSSの "font-size" プロパティが使われている。一般的なスタイルシート言語には約50のプロパティがある。値と単位プロパティに対してある値を指定することで要素の表示を変化させる。値には、文字列、キーワード、数、数と単位識別子の組合せなどがある。また、値としてリストや既出の値を使った式も指定できる。スタイルシートでの典型的な値の例として「長さ」の値 "1.5em" は、数 (1.5) と単位 (em) から構成されている。"em" はCSSでは周辺のテキストのフォントサイズを意味する。典型的なスタイルシート言語には約10種類の単位が使える。値伝播機構全要素について、全プロパティの値を明示的に指定しなくて済むように、スタイルシート言語には値を自動的に伝播させる機構が備わっている。値伝播によってスタイルシートが冗長でなくなり、短くなる。上記の例では、フォントサイズだけが指定されている。他の属性の値は値伝播機構によってそれ以前の設定がそのまま使われる。書式モデル全てのスタイルシート言語には何らかの書式モデルがサポートされている。多くのスタイルシート言語には視覚的書式モデルがあり、最終的な表示がどのようなレイアウトになるかを指定できる。例えば、CSS書式モデルはブロックレベル要素（例えば "h1"）が親要素の幅を満たすよう拡張することを指定する。スタイルシート言語によっては、音声的書式モデルを持つものもある。 [編集] スタイルシート言語の一覧スタイルシートにはコンピュータ言語によって記述されるものがある。そのような言語をスタイルシート言語と呼ぶ。[編集] 標準CSS (Cascading Style Sheets)DSSSL (Document Style Semantics and Specification Language; 文書スタイル意味指定言語)XSL (Extensible Stylesheet Language; 拡張可能スタイルシート言語) XSLT (XSL Transformations)XSL-FO (Extensible Stylesheet Language Formatting Objects)   [編集] 非標準JSS（JavaScript Style Sheets、Netscape Navigator 4.x系列のみ対応） [編集] オフィスソフトにおけるスタイルシート現状市場に出回っているほとんどのオフィスソフトには「スタイル機能」と呼ばれるスタイルシートが実装されている。この、スタイル機能は通常オフィスソフトにおいて非常に重要な機能であり、Microsoft Wordのようにスタイル機能が使いこなせないとレイアウトをとることが極めて難しくなるソフトも存在する。なお、現在ではスタイルシートと言えばスタイルシート言語をさすことが多いが、スタイルシートはそもそも英文ワードプロセッサのレイアウト方法として提唱された方式であり、オフィスソフトにおけるスタイルシートのほうが歴史は古い。[編集] Webにおけるスタイルシートウェブデザインにおいては、HTMLやXHTMLといったマークアップ言語で意味論的内容と構造を記述し、表示形式（スタイル）はスタイルシートに記述する。スタイルシートはマークアップ言語で書かれたファイルとは別ファイルであり、CSSやXSLといったスタイルシート言語で書かれる。[編集] スタイルシートの特徴[編集] 利点スタイルと中身を分離することで、様々な利点が生じるが、それが現実的となったのはWebブラウザでのCSS実装が強化された最近のことである。性能一般にスタイルシートを使ったサイトの方がそうでないサイトよりも表示が速い。ブラウザの実装にもよるが、HTMLの仕様として更新のないファイルはブラウザのキャッシュを使用することになっているので、スタイルシートがファイルに分離されている場合は各ページの読み込みは高速化される。保守性全ての表示スタイルを1つのファイルに保持することで、保守時間が大幅に削減され、保守時に人間が間違う可能性も削減される。例えば、あるサイトのコンテンツを作成した後でフォントの色を #3667CA （ウェブセーフカラーでない色）にしなければならなくなったとする。スタイルシートを使っていない場合、その面倒な修正作業を全ページについて行わなければならず、間違いが混入しやすくなる。CSSを正しく使っていれば、1つのCSSファイルのたった6文字を修正するだけで済む。また、HTML・XHTMLページの可読性がよくなり、表示の一貫性が保たれるという利点もある。アクセス容易性CSSを使ったサイトは、異なるブラウザ（Internet Explorer、Mozilla Firefox、Opera、Safariなど）で同じ表示になるよう調整することが容易である。CSSを使ったサイトのブラウザでの表示は、例えばLynx (ウェブブラウザ)のようなグラフィックスを表示できない古い（CSSを解釈できない）ブラウザでも可能である（CSSを無視して可能な範囲で表示される）。古いバージョンのCSSしか解釈できない場合も、その範囲でのみ表示可能である。このため、様々な機能レベルのユーザーエージェントがサイトのコンテンツにアクセス可能となっている。例えば点字ディスプレイを使ったブラウザは、ほとんどのレイアウト情報を無視するが、それでもユーザーは全ページのコンテンツにアクセス可能である。カスタマイズページのレイアウト情報がコンテンツと分離されることで、そのレイアウト情報を無視して表示させても、内容を読むことができる。また、サイト側が複数のスタイルシートを提供し、コンテンツに影響を与えずに見た目を完全に変えることも可能である。最近のWebブラウザはユーザーが独自のスタイルシートを定義できるようになっており、サイト作成者のレイアウト規則を上書きすることもできる。例えば、アクセスした全てのページでハイパーリンクを太字で表示させるといったことが可能である。一貫性マークアップ言語で書かれたファイルは、著者が伝えようとしている意味だけを含んでいるため、その様々な要素のスタイルは非常に一貫している。例えば、見出し、強調テキスト、リスト、数式などといった要素は外部のスタイルシートによって、一貫したスタイルを適用される。著者は合成時のスタイルプロパティを気にする必要はない。見た目の詳細は実際に表示されるときに決定される。移植性見た目の詳細が実際に表示されるときに決定されるということは、新たな媒体に新たなスタイルシートを用意すれば、同じコンテンツを修正することなくその新しい媒体でも再利用できることを意味する。注意深く制作されたWebページは、新たなスタイルシートを適用することで、ヘッダやフッタ、ページ番号、目次などを備えた容易に印刷可能な本にすることもできる。 [編集] 実用上の問題XHTML、XSL、CSS といった現状の仕様とそのソフトウェアツールでの実装は、やっと成熟段階に至ったレベルである。従って、このような内容とスタイルの分離をしようとしたときに、いくつかの実用的問題が生じることがある。意味論的語彙の欠如HTML には意味論的要素の語彙（例えば、段落、引用、強調など）が限られている。HTMLから拡張可能なXHTMLへの移行により、より豊富な意味論的語彙の採用が促進され、スタイルシートでの対応も促進されると考えられる。例えば、Ruby Annotation[1]、MathML、XForms、XFrames といった拡張によって新たな要素が文書に使われるようになれば、それらのスタイルを指定できるようスタイルシート言語も拡張されるだろう。しかし、現状ではスタイルシート言語がサポートしていない要素については、作者が場当たり的にセレクタを追加生成しなくてはならない。複雑な配置複雑な配置をスタイルシート側で制御しようとしても、ブラウザが対応していない場合がある。解析/生成ツール以外での採用が少ないスタイルシートの仕様は完成されつつあるが、ソフトウェアツール側での対応は遅い。主なWeb開発ツールはいまだに表示とコンテンツの混合型モデルを採用している。 [編集] 脚注[ヘルプ]  ^ ルビ表記 (Ruby Annotation) の詳細な仕様については外部リンクRuby Annotationも併せて参照。 [編集] 関連項目関心の分離 [編集] 外部リンクCascading Style Sheets PhD thesis, by Hkon Wium LieSimply JavaScript: The Three Layers of the WebCSS Zen Garden: XHTMLソースを変えずに新たなページレイアウトを生成しようとしているサイト。様々なレイアウトとそのCSSソースが参照できる。Revealed - Our HTML and CSS Codes - cameraontheroad.com: 新たにスタイルシートを使おうとしているサイトに有効な例を提示。各種リソースへのリンクもある。 この「スタイルシート」はコンピュータに関連した書きかけ項目です。この記事を加筆して下さる協力者を求めています（PJ コンピュータ / Portal:コンピュータ）。    「http://ja.wikipedia.org/wiki/%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%82%B7%E3%83%BC%E3%83%88」より作成カテゴリ: スタイルシート言語 | コンピュータ言語 | ウェブデザイン隠しカテゴリ: コンピュータ関連のスタブ項目 