出典: フリー百科事典『ウィキペディア（Wikipedia）』 移動: ナビゲーション, 検索 マジックナンバーとは、ファイルなどオブジェクト類の形式を識別するもの、フォーマット識別子のことである[出典 1]。目次 1 概要2 Unix系OSでの具体例3 Unix系OSにおける扱い4 Unix系OS以外での扱い5 マスターブートレコード6 共用体との関係7 その他8 脚注9 関連項目    [編集] 概要コンピュータ分野では、一見意味不明に見える情報を意味する言葉として、プログラムに埋め込まれた謎の数値等様々な場面でマジックナンバーという言葉が用いられる[出典 1]。ここで説明するマジックナンバーも、そういった情報を意味する言葉の一つである。ファイルの種類を識別する方法には、歴史的経緯によりいくつかの方法が用いられてきた。DECから始まる流れに由来してMS-DOSやWindowsで用いられている拡張子を用いる方法、Mac OS X以前のMacintoshで採用されていたクリエータコードとファイルタイプを用いる方法などがある。Unix系OSのファイルにも拡張子をつけることはあるが、WindowsにおけるEXEやDLLなどのようにOS上の制約を持った拡張子はUnix系OSには存在せず、それらはアプリケーション制約あるいは単に可読性を考慮した結果によるものである。 前者の制約に例としては、オブジェクトファイルの拡張子が o であるのは単にリンカの制約であるといえる。後者の可読性は例えば、tarを用いてアーカイブおよびgzip圧縮されたファイルはしばしば filename.tar.gz あるいは filename.tgz というファイル名で示されるが、tarにはそのようなファイル名の制約は存在しない。「tarを用いてアーカイブされた上でgzip圧縮された」ファイルであることを利用者が把握しやすくするために、そのようなファイル名が用いられるのみである。なお、デスクトップ環境やカラフルなカスタマイズが施された一部のコマンド（lsなど）においては、拡張子を区別して動作するように実装されているものがあるが、これらは単にアプリケーション依存のものであり、OS上の制約とは言えない。後年に登場したデスクトップ環境や一部のシェル環境（FDCloneなど）では、拡張子に応じてファイルの種類を区別し、それに応じて起動するアプリケーションを切り替える仕組みが設けられているが、そのようなものが登場する前からUnix系OSにはファイルの種類を識別する別の方法が存在していた。それは、ファイルの冒頭付近に埋め込まれたファイル形式の識別子を参照するという方法で、その識別子のことを「マジックナンバー」[出典 2]、「マジック番号」[出典 3]と呼んでいる。この判断方法においてユーザーは、ファイルの冒頭付近をバイナリエディタ等を用いてマジックナンバーを直接参照するのではなく、Unix系OSのOS標準アプリケーションであるfileコマンドを用いてファイル形式を確認するのが一般的である。また、ファイル以外にもデータ構造を持ったオブジェクト全般、例えば、マスターブートレコードにおけるファイルシステムの種類を表す識別子なども、マジックナンバーと呼ばれている。[編集] Unix系OSでの具体例/dev/null をgzip圧縮したファイルを例に説明する。これは以下のコマンドで作成可能である。
gzip --stdout < /dev/null > null.gz
 このファイルの16進ダンプは以下の通りである。
00000000  1F 8B 08 00  DE 81 F7 4A  00 03 03 00  00 00 00 00  00 00 00 00

このファイルをfileコマンドに読み込ませると、以下のように「gzip圧縮されたデータ」である旨が表示される。
$ file null.gz
null.gz: gzip compressed data, from Unix, last modified: （最終更新日付が表示される）
$
 fileコマンドは、ファイル形式識別用の定義ファイル magic（FreeBSDであれば /usr/share/misc/magic ）に記されている「ファイルの先頭から2バイトが 0x1F 0x8B であるファイルはgzip圧縮ファイルである」という定義に基づいて上記のように表示しており、この「0x1F 0x8B」で示される2バイトのコードがファイル形式の識別子、つまりマジックナンバーである。[編集] Unix系OSにおける扱いUnix系OSには複数の実行可能なバイナリファイル形式が存在する。a.out、COFF、ELFなどである。Unix系OSが実行ファイルを実行する際、それがテキストファイルであればシェルスクリプトと見なしてシェルを呼び出し（さらにシェルは、そのファイルが #! で始まっていればそれに後続して示されるアプリケーションを呼び出し）、そうでない場合はその実行ファイルを前述のようなバイナリ形式であると判断して直接呼び出すが、この際のファイル形式の判断にもマジックナンバーが用いられている。このような仕組みから、Unix系OSでは起動方法を切り替える仕組みをフックすることで、初期状態ではサポートされていないファイル形式の実行バイナリを実行することも可能となっている。例えば、*BSDにおける互換レイヤー（Linux互換レイヤーやSVR4互換レイヤーなど）、*BSDにおけるWin32カーネル互換パッケージのPEACE[出典 4]などは、この機能の実現例である。これが実現可能である根底には、ファイル形式を拡張子ではなくマジックナンバーやマジックナンバーに後続するフラグ類によって判断していることが影響している。例えば、*BSD用のlsコマンドとLinux用のlsコマンドはファイル名が完全に一致し、実際にはlsコマンドをはじめとするUnix系OSの大半の基本コマンドはファイル名がほとんどの場合で一致し、拡張子も一致することとなる。そのため、拡張子やファイル名で*BSD用の実行ファイルであるかLinux用の実行ファイルであるかを区別することはできない。*BSDもLinuxもELFバイナリが用いられており、マジックナンバーは「0x7F ELF」と共通であるが、両者を区別可能なオプションとして、7バイト目にどのOS向けのELFバイナリであるかが格納されている。例えば、FreeBSDであれば「0x09」、NetBSDであれば「0x02」、Linuxであれば「0x03」などである。そして、これらの情報からLinux用のELFバイナリであればLinux互換レイヤー経由で実行することで、*BSD上であってもLinux用のバイナリを実行することが可能となる。[編集] Unix系OS以外での扱いUnix系OSに限らず他のOS向けのアプリケーションにおいても、バイナリファイルの冒頭付近に他のアプリケーション用のファイルと区別可能なマジックナンバーを設けることは一般的であり、他のアプリケーション用のファイルが読み込まれた場合の誤動作防止のためのチェック用コードとして機能している。Microsoft Office関連のデータファイルであれば、「ファイルの先頭から8バイト」の「D0 CF 11 E0 A1 B1 1A E1」など（何種類か存在する）がマジックナンバーである。また、将来、ファイル形式の拡張が必要となる時のために、マジックナンバーにバージョン番号を含めておくこともしばしば行われる。LHAの場合、「ファイルの3バイト目からの5バイト」がマジックナンバーに相当し、「-lh0-」や「-lh4-」などのように中の3バイトがLZH形式の形式名称と一致する。PDFの場合、「ファイルの先頭から5バイト」が「%PDF-」となっているが、それにバージョン番号が後続する。WindowsやMACではマジックナンバーを参照することに特化したアプリケーションはOSに付属されていないため、このような情報を利用者が参照することはあまりない。ただし、誤った拡張子が付与されているために正しいアプリケーションが開けなくなったファイルの拡張子を補正するようなソフトウェアは、マジックナンバーを参照して本来のファイル形式を判断している。ファイル偽装されたファイルの復元アプリケーションではマジックナンバー以外の情報も参照しているが、ここでは単に拡張子が別のものに変わってしまったようなケースを想定して説明している。[編集] マスターブートレコードマスターブートレコードのパーティションテーブルには、パーティションの種類を示す情報、パーティション識別子が含まれている。例えばFAT32であれば0x0B、NTFSであれば0x07、FreeBSDのFFSであれば0xA5などである。この情報はファイルシステムのフォーマット識別子とも言える。一部のOSでは、パーティション識別子の付与とフォーマットを同タイミングで行うため、この両者は一致する。Windowsでは、パーティションの作成（パーティションサイズの決定）は独立操作であるが、パーティション識別子の付与とフォーマットは単一の操作であり、同タイミングで行われる。一方、パーティション識別子の付与とフォーマットを行うタイミングが異なり、パーティション識別子と無関係の形式でフォーマットを行うことが可能なOSも存在する。これは、複数のフォーマット形式に対応したPC-UNIX全般について言える。例えば、FreeBSDでは、パーティション識別子の付与は fdisk のタイミングで行われ、フォーマットは newfs や newfs_msdos で行うこととなるが、これらのフォーマットコマンドはパーティション識別子とは無関係に実行することが可能である。そのため、FAT32の識別子を付けた状態でUFSフォーマットを行うことも可能である。Linuxでも、フォーマットコマンドが mkfs.ext4 や mkfs.vfat や mkfs -t msdos などに変わる以外、事情は同じである。このようにして作成されたパーティションは、パーティション識別子を信じて動作するソフトウェアでは使用することができず、誤動作防止用のチェック機能も正しくは働かず、LinuxやFreeBSDのようにmount 時にパーティション識別子と無関係にフォーマット形式を指定可能なOSでのみ使用可能である。[編集] 共用体との関係C言語など一部のプログラミング言語には、共用体と呼ばれるデータ構造がある。これは、同じ領域に異なるデータ構造でアクセス可能とする仕組みを持ったデータ構造である。実際には、共用体の後続メンバをどのデータ構造でアクセスすれば良いかを先頭メンバに持たせる形で使う、つまりタグ付き共用体として使うケースが多く、タグは共用体のデータ構造を識別する目的で使用することが可能である。すなわち、タグがマジックナンバーとして機能することになる。[編集] その他ジャーゴンファイルでは、「既存のファイル形式と重ならないように、新しい番号をどのように決めれば良いか」「簡単である。ランダムに決めれば良い」「まさしくMagicである」と取り上げられている[出典 1]。[編集] 脚注[ヘルプ]  ^ a b c "Jargon File - magic number". 2009年11月9日閲覧。 - ジャーゴンファイルではコンピュータ関連の4種類のマジックナンバーが示されており、本項のマジックナンバーは左記の3に相当する。^ "FreeBSD日本語マニュアル検索 - file". 2009年11月9日閲覧。^ "FreeBSD日本語マニュアル検索 - magic". 2009年11月9日閲覧。^ "The PEACE Project". 2009年11月9日閲覧。  [編集] 関連項目ファイルフォーマット この「マジックナンバー (フォーマット識別子)」はコンピュータに関連した書きかけ項目です。この記事を加筆して下さる協力者を求めています（PJ コンピュータ / Portal:コンピュータ）。    「http://ja.wikipedia.org/wiki/%E3%83%9E%E3%82%B8%E3%83%83%E3%82%AF%E3%83%8A%E3%83%B3%E3%83%90%E3%83%BC_(%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88%E8%AD%98%E5%88%A5%E5%AD%90)」より作成カテゴリ: ファイルフォーマット隠しカテゴリ: コンピュータ関連のスタブ項目 