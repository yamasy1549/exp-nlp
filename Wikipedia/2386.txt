出典: フリー百科事典『ウィキペディア（Wikipedia）』 移動: ナビゲーション, 検索 文脈自由文法（ぶんみゃくじゆうぶんぽう、Context-free Grammar、CFG）とは、言語学や情報工学において全生成規則が以下の形式である形式文法のひとつである。V → w ここで V は非終端記号であり、w は終端文字と非終端記号から構成される文字列である。「文脈自由」という用語は前後関係に依存せずに非終端記号 V を w に置換できることを意味している。文脈自由文法によって生成される形式言語を文脈自由言語という。目次 1 背景2 形式的定義2.1 追加定義12.2 追加定義22.3 追加定義32.4 追加定義42.5 追加定義5  3 例3.1 例 13.2 例 23.3 例 33.4 例 43.5 その他の例  4 導出と構文木5 標準形6 非決定性7 拡張8 言語学的応用9 関連項目10 脚注11 参考文献    [編集] 背景文脈自由文法はノーム・チョムスキーが言語学で今も使われる「句構造文法（Phrase-Structure Grammar）」として最初に記述した[1]。文脈自由文法の形式性は、言語学が伝統的に自然言語の文法を厳密な数学として記述してきた既存の方法（例えばパーニニ）に倣っている。自然言語文の「ブロック構造」を自然に捉えている。その単純性から、数学的な研究手法が使えるが、問題もある。自然言語の文法の重要な機能である一致や参照といった属性をそのまま表すことができないのである。ブロック構造はALGOLプロジェクトによってプログラミング言語に持ち込まれた。すなわち、ALGOL の文法を文脈自由文法として記述することになった。これがその後のコンピュータ言語にも採用され、コンピュータ言語の文法の形式的記述方法がバッカス・ナウア記法として知られるようになった。文脈自由文法の「ブロック構造」は文法上非常に基本的であり、特に計算機科学では構文や文法は文脈自由文法を利用することが多い。文法によって表せない形式上の制約は、言語の意味論の一部と考えられるようになった。文脈自由文法はほとんどのプログラミング言語の文法を記述できるほど強力である。実際、多くのプログラミング言語は文脈自由文法で構文仕様を定義している。また、文脈自由文法は効率的な構文解析アルゴリズムを適用できる程度に単純である。つまり、ある文字列が特定の文法による言語に属しているかどうかを判断することができる（例えばアーリー法）。初期の構文解析手法であるLR法やLL法は文脈自由文法のサブセットを扱うものであった。全ての形式言語が文脈自由ではない。文脈自由でない例として  がある。この言語は 解析表現文法（PEG）で生成できる。PEG はプログラミング言語に適した新たな定式化のひとつである。[編集] 形式的定義文脈自由文法 G は次の 4-タプル で表される。 ここで は変数（非終端記号）の有限集合 は終端記号の有限集合で、 は開始記号（変数） は V から  への関係であり、 が成り立つ  のメンバーを文法の規則と呼ぶ。[編集] 追加定義1任意の  について  となるような生成写像  が存在する。順序対  を  のプロダクション（生成規則）と呼び、一般に  のように表記する。[編集] 追加定義2任意の  について、 が  を生成することを  で表す。ただし、 かつ  で  が成り立たねばならない。[編集] 追加定義3任意の  について、（あるいは ）であるとは、 となるような  が成り立つ場合である。[編集] 追加定義4文法  の言語は次の集合で表される。L(G) = {} [編集] 追加定義5言語  は、 となるような文脈自由文法  が存在するとき、文脈自由言語(CFL)であるという。[編集] 例[編集] 例 1最初の例は非常に単純な以下の規則で表される。S → aSb | ε ここで | は論理和を意味し、S を置換可能な文字列を併記するのに使われる。ε は空の文字列を意味する。この文法によって生成される言語は以下のようになる。  これは正規言語ではない。[編集] 例 2次は三種類の変数 x, y, z を使った文法的に正しい四則演算の数式を生成する文脈自由文法である。ここで演算子は中置としている。S → x | y | z | S + S | S - S | S * S | S/S | (S) この文法に従うと、例えば "( x + y ) * x - z * y / ( x + x )" といった式が生成可能である。この文法は、複数の構文木から同じ文字列が生成されうるという意味で曖昧である。[編集] 例 3文字セット {a,b} について、異なる個数の a と b から構成される全ての文字列を生成する文脈自由文法は以下のようになる。S → U | V U → TaU | TaT V → TbV | TbT T → aTbT | bTaT ここで、T に関する生成規則は a と b が同数の文字列を生成するが、U は a の方が必ず多くなる文字列を生成し、V は b の方が必ず多くなる文字列を生成する。[編集] 例 4次の例は  である。これは正規言語ではなく文脈自由言語である。以下の生成規則で生成される（この生成規則は文脈自由文法にしたがっている）。S → aSc | B B → bBc | ε [編集] その他の例文脈自由文法は数学的な「形式的」言語だけで利用されるわけではない。例えば、タミル語の詩である Venpa は文脈自由文法で定式化できることが指摘されている[2]。[編集] 導出と構文木ある文法において、開始記号からある文字列が導出される過程を記述する方法は二種類存在する。単純な方法は導出過程の途中の文字列を全て書き出していく方法である。つまり開始記号から始めて、生成規則を一回適用する度に文字列を書き出して、最後に目的の文字列になるまで列挙するのである。例えば「左端に最も近い非終端記号を最初に書き換える」という規則を適用したとすれば、文脈自由文法では適用する生成規則を列挙するだけで十分である。これを文字列の「左端導出」（Leftmost Derivation）と呼ぶ。例えば、以下の文法があるとする。(1) S → S + S (2) S → 1 (3) S → a 文字列「1 + 1 + a」を導出する過程は [ (1), (1), (2), (2), (3) ] というリストになる。同様に「右端導出」も定義できる。この例の場合、右端導出での導出過程は [ (1), (3), (1), (2), (2)] というリストになる。左端導出と右端導出のリストが異なるのは重要なポイントである。構文解析では、文法規則毎にそれを入力文字列に適用する小さなプログラムが存在する。したがって、構文解析が左端導出を行うのか右端導出を行うのかによってそれらのプログラムを適用する順番が変わってくるのである。導出過程は導出される文字列上にある種の階層構造を描くことでも表される。例として左端導出による「1 + 1 + 1」に対する階層構造を見てみよう。導出過程は以下のようになる。S→S+S (1) S→S+S+S (1) S→1+S+S (2) S→1+1+S (2) S→1+1+1 (2){ { { 1 }S + { 1 }S }S + { 1 }S }S ここで { ... }S は S から導出された部分文字列を意味している。これに対応する階層構造は以下のような木構造になる。
     　　　  Ｓ
 　　 　    ／|＼
 　　 　  ／  |　＼
 　　   ／  　|　　＼
   　  Ｓ　　'+'　　Ｓ
  　 ／|＼   　　　 |
  ／　 |　＼ 　　　 |
 Ｓ　 '+'　Ｓ　　　'1'
 |    　 　 |
'1' 　 　  '1'
この木構造をその文字列の「具象構文木」と呼ぶ（抽象構文木も参照されたい）。この場合、上述の左端導出も右端導出も同じ構文木になるが、左端導出には以下のような別の導出過程が存在する。S→ S + S (1) S→ 1 + S (2) S→ 1 + S + S (1) S→ 1 + 1 + S (2) S→ 1 + 1 + 1 (2) これによって定義される構文木は以下のようになる。
    　　Ｓ 
  　  ／|＼
  　／  |　 ＼
  ／  　| 　  ＼
 Ｓ　　'+'  　 Ｓ
 |   　 　　 ／ |＼
 |   　　  ／　 |  ＼
'1' 　　  Ｓ　 '+'  Ｓ
    　　  |   　　 　|
    　　 '1'  　　　'1'
この文法のように、ある文字列を導出する構文木が複数考えられる文法を「曖昧な文法」（Ambiguous Grammar）と呼ぶ。このような文法の構文解析は、生成規則の適用順序を毎回決定しなければならないため難しい。[編集] 標準形空の文字列を生成しない文脈自由文法は等価なチョムスキー標準形かグライバッハ標準形に変換できる。ここでいう「等価」とは同じ言語を生成するという意味である。チョムスキー標準形文法は生成規則が単純なので、この標準形は理論的にも実用上も密接な関係がある。例えば、ある文脈自由文法についてチョムスキー標準形を使うことで多項式時間のアルゴリズムで入力された文字列がその文法で生成されるものか否かを判定できる（CYKアルゴリズム）。[編集] 非決定性文脈自由文法は能力が制限されているため、その操作の一部は決定可能であるが、同時に決定不能な問題もある。最も単純で分かり易い決定不能問題の1つとして、CFG が言語の全文字列を受容するかどうかという問題がある。還元によって、この問題がチューリングマシンの停止問題と同じであることが示される。その還元には、チューリングマシンのあらゆる計算過程を示す「計算履歴」と呼ばれる概念を用いる。あるチューリングマシンがある入力を与えられたとき、それを受容しない計算履歴の文字列を生成するCFGを構築でき、そうすると、そのCFGはマシンが入力を受容しないときだけ文字列を受容（認識）する。これを応用すると、2つのCFGが同じ言語を記述しているかどうかも判定不能である。なぜなら、言語の全文字列を決定する自明なCFGとの等価性を判定できないためである。また、文脈依存文法が文脈自由言語を表しているかどうかも決定不能な問題である。[編集] 拡張文脈自由文法の形式性の拡張として、非終端記号に引数を持たせ、規則内で値を渡すということが考えられる。これにより、自然言語の一致や参照といった機能を表現可能となり、プログラミング言語での識別子の定義や正しい用法を自然な形で表現可能となる。例えば、英語の文で、主語と動詞が数において合致しなければならないということを容易に表現できる。計算機科学では、このようなアプローチの例として接辞文法、属性文法、Van Wijngaarden の two-level grammar などがある。同様の拡張は言語学にもある。別の拡張として、規則の左辺に追加の記号を書けるようにする手法がある。これは文脈依存文法に他ならない。[編集] 言語学的応用ノーム・チョムスキー自身は、生成文法を追加することで文脈自由文法の制限を克服したいと考えていた[1]。そのような規則も言語学によく見られる。例えば、英語における受動態化である。しかし、それらは強力すぎるため（チューリング完全）、変換の適用は制限される必要がある。生成文法の大部分は、句構造文法と変換規則の記述機構を改善し、自然言語が表現できることを正確に表せるようにすることを目的としている。彼は自然言語が文脈自由でないと考えていたが[3]、彼がCFGでは不十分であることを示す証拠として挙げた事例は、後に間違いであることが証明された[4]。Gerald Gazdar と Geoffrey Pullum は、一部に文脈自由的でない構造があるものの、自然言語の大部分は文脈自由であると指摘している[4]。文脈自由でない部分とは、例えば、スイスドイツ語の cross-serial dependencies [3] や、バンバラ語の畳語である[5]。[編集] 関連項目文脈依存文法構文解析形式文法解析表現文法確率文脈自由文法 [編集] 脚注^ a b Chomsky, Noam (1956年9月). “Three models for the description of language”. Information Theory, IEEE Transactions 2 (3): 113124. 2007年6月18日閲覧。^ L, BalaSundaraRaman; Ishwar.S, Sanjeeth Kumar Ravindranath (2003年8月22日). "Context Free Grammar for Natural Language Constructs - An implementation for Venpa Class of Tamil Poetry". Proceedings of Tamil Internet, Chennai, 2003: 128-136, International Forum for Information Technology in Tamil.2006年8月24日閲覧。. a b Shieber, Stuart (1985年). “Evidence against the context-freeness of natural language”. Linguistics and Philosophy 8: 333343.^ a b Pullum, Geoffrey K., Gerald Gazdar (1982年). “Natural languages and context-free languages”. Linguistics and Philosophy 4: 471504.^ Culy, Christopher (1985). “The Complexity of the Vocabulary of Bambara”. Linguistics and Philosophy 8: 345351.  [編集] 参考文献Michael Sipser (1997年). Introduction to the Theory of Computation. PWS Publishing. ISBN 0-534-94728-X.Section 2.1: Context-Free Grammars, pp.91101. Section 4.1.2: Decidable problems concerning context-free languages, pp.156159. Section 5.1.1: Reductions via computation histories: pp.176183.  「http://ja.wikipedia.org/wiki/%E6%96%87%E8%84%88%E8%87%AA%E7%94%B1%E6%96%87%E6%B3%95」より作成カテゴリ: コンパイラ | 形式言語 | 数学に関する記事 